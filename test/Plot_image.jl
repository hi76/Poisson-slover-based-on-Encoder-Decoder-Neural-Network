using PyPlot

function _showimage(predict_phi, x, y, count, image_size, date)
    if length(size(predict_phi))==2
        predict_phi = reshape(predict_phi,(image_size,image_size,1,1))
    end

    pred_show = Array(predict_phi)
    x_show = Array(x)
    y_show = Array(y)
    pred_show = reshape(pred_show,(size(predict_phi)[1],size(predict_phi)[2]))
    x_show = reshape(x_show,(size(x_show)[1],size(x_show)[2]))
    y_show = reshape(y_show,(size(y_show)[1],size(y_show)[2]))
    figure("pred_show")
    title("prediction")
    imshow(pred_show)
    xticks([])
    yticks([])
    cb=colorbar()
    cb.ax.tick_params(labelsize=26)
    savefig(date*string(count)*"_predict_phi.png")
    cb.remove()
    close("pred_show")
    figure("x_show")
    title("rho")
    imshow(x_show)
    xticks([])
    yticks([])
    cb=colorbar()
    cb.ax.tick_params(labelsize=26)
    savefig(date*string(count)*"_rho.png")
    cb.remove()
    close("x_show")
    figure("y_show")
    title("phi")
    imshow(y_show)
    xticks([])
    yticks([])
    cb=colorbar()
    cb.ax.tick_params(labelsize=26)
    savefig(date*string(count)*"_phi.png")
    cb.remove()
    close("y_show")
    figure("difference")
    title("error")
    imshow(pred_show-y_show)
    xticks([])
    yticks([])
    cb=colorbar()
    cb.ax.tick_params(labelsize=26)
    cb.formatter.set_scientific(true)
    cb.formatter.set_powerlimits((-2,0))
    cb.ax.yaxis.get_offset_text().set_fontsize(26)
    savefig(date*string(count)*"_error.png")
    cb.remove()
    close("difference")
end
